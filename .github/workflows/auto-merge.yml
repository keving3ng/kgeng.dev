name: Auto Merge

on:
  # Trigger on PR events
  pull_request:
    types: [labeled, unlabeled, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'pull_request_review' ||
      github.event_name == 'check_suite' ||
      github.event_name == 'status'
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR number
        id: get-pr
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "check_suite" ]; then
            # Get PR number from check suite
            pr_number=$(gh pr list --state open --json number,headRefName | jq -r ".[] | select(.headRefName == \"${{ github.event.check_suite.head_branch }}\") | .number")
            echo "pr_number=${pr_number}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "status" ]; then
            # Get PR number from status context
            pr_number=$(gh pr list --state open --json number,headRefName | jq -r ".[] | select(.headRefName == \"${{ github.event.branches[0].name }}\") | .number")
            echo "pr_number=${pr_number}" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR has auto-merge label
        id: check-label
        if: steps.get-pr.outputs.pr_number != ''
        run: |
          pr_number="${{ steps.get-pr.outputs.pr_number }}"
          if [ "$pr_number" = "null" ] || [ "$pr_number" = "" ]; then
            echo "No PR number found, skipping"
            echo "has_auto_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          labels=$(gh pr view ${pr_number} --json labels | jq -r '.labels[].name')
          if echo "$labels" | grep -q "auto-merge"; then
            echo "has_auto_merge=true" >> $GITHUB_OUTPUT
            echo "PR #${pr_number} has auto-merge label"
          else
            echo "has_auto_merge=false" >> $GITHUB_OUTPUT
            echo "PR #${pr_number} does not have auto-merge label"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR status and merge
        if: steps.check-label.outputs.has_auto_merge == 'true'
        run: |
          pr_number="${{ steps.get-pr.outputs.pr_number }}"
          
          echo "Checking PR #${pr_number} for auto-merge conditions..."
          
          # Get PR details
          pr_data=$(gh pr view ${pr_number} --json mergeable,mergeStateStatus,reviewDecision,isDraft,headRefName,baseRefName)
          
          mergeable=$(echo "$pr_data" | jq -r '.mergeable')
          merge_state=$(echo "$pr_data" | jq -r '.mergeStateStatus')
          review_decision=$(echo "$pr_data" | jq -r '.reviewDecision')
          is_draft=$(echo "$pr_data" | jq -r '.isDraft')
          head_ref=$(echo "$pr_data" | jq -r '.headRefName')
          base_ref=$(echo "$pr_data" | jq -r '.baseRefName')
          
          echo "PR Status:"
          echo "  Mergeable: $mergeable"
          echo "  Merge State: $merge_state"
          echo "  Review Decision: $review_decision"
          echo "  Is Draft: $is_draft"
          echo "  Head: $head_ref"
          echo "  Base: $base_ref"
          
          # Check if PR is ready for merge
          if [ "$is_draft" = "true" ]; then
            echo "‚ùå PR is in draft state, cannot auto-merge"
            exit 0
          fi
          
          if [ "$mergeable" != "MERGEABLE" ]; then
            echo "‚ùå PR is not mergeable (conflicts or other issues)"
            exit 0
          fi
          
          # Check if all status checks are passing
          if [ "$merge_state" != "CLEAN" ]; then
            echo "‚ùå Not all status checks are passing (merge state: $merge_state)"
            exit 0
          fi
          
          # For this repo, we'll require at least one approval or allow merge without reviews for certain branches
          if [ "$review_decision" = "REVIEW_REQUIRED" ]; then
            echo "‚ùå PR requires review approval before merging"
            exit 0
          fi
          
          # All conditions met, proceed with merge
          echo "‚úÖ All conditions met, proceeding with auto-merge"
          
          # Use squash merge for cleaner history
          gh pr merge ${pr_number} --squash --auto --delete-branch
          
          echo "üéâ PR #${pr_number} has been auto-merged!"
          
          # Add a comment to document the auto-merge
          gh pr comment ${pr_number} --body "ü§ñ This PR was automatically merged due to the \`auto-merge\` label."
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle merge failure
        if: failure() && steps.check-label.outputs.has_auto_merge == 'true'
        run: |
          pr_number="${{ steps.get-pr.outputs.pr_number }}"
          if [ "$pr_number" != "" ] && [ "$pr_number" != "null" ]; then
            gh pr comment ${pr_number} --body "‚ùå Auto-merge failed. Please check the requirements:
            - All status checks must pass
            - PR must not be in draft state  
            - PR must be mergeable (no conflicts)
            - Required reviews must be approved (if any)
            
            The \`auto-merge\` label will remain, and merge will be attempted again when conditions are met."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}